print(data.decode())
        data_list = data.decode().split("\r\n")
        headers = {}
        headers["method"], headers["uri"], headers["version"] = data_list[0].split()
        msg_body = ""
        for header in data_list[1:]:
          if header != "":
            if ": " in header:
              header_name, header_value = header.split(": ")
              headers[header_name] = header_value
            else:
              msg_body += header + "\r\n"
        config = configparser.ConfigParser()
        config.read(os.path.join(".", "conf", "localhost.conf"))
        if "Host" in headers.keys():
          host = headers["Host"]
          directory = config.get(host, "Directory")
          status_code = 404
          message = "Not Found"
          answer_body = ""
          if headers["uri"] in ["/", "/index", "/indes.html"]:
            if os.path.exists(os.path.join(directory, "index.html")):
              #status_code = 200
              #message = "OK"
              with open(os.path.join(directory, "index.html")) as indexfile:
                answer_body = "".join(indexfile.readlines())
          else:
            path = os.path.join(*headers["uri"].split("/")[1:])
            if os.path.exists(os.path.join(directory, path)):
              #status_code = 200
              #message = "OK"
              with open(os.path.join(directory, path)) as answerfile:
                answer_body = "".join(answerfile.readlines())
            else:
              status_code = 404
              message = "Not Found"
              answer_body = ""
          answer_headers = "{version}{status_code}{message}\n{headers}\n\n".format(version=headers["version"], status_code = status_code, message = message, headers ="")
          answer = answer_headers + answer_body
          print(answer)
          conn.send(answer.encode())
          conn.close()
        else:
          conn.close()